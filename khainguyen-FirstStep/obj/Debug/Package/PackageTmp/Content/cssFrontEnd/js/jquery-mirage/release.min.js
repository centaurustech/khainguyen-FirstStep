function initialize(n){process.argv[2]==="-d"&&(process.argv.shift(),debug=!0,console.warn("=== DEBUG MODE ==="));var r,u,f=/^(\d+)\.(\d+)\.(\d+)(?:-([\dA-Za-z\-]+(?:\.[\dA-Za-z\-]+)*))?$/,t=f.exec(process.argv[2]||"")||[],e=t[1],o=t[2],i=t[3],s=t[4];releaseVersion=process.argv[2];isBeta=!!s;releaseVersion||die("Usage: release [ -d ] releaseVersion");t.length||die("'"+releaseVersion+"' is not a valid semver!");s==="pre"&&die("Cannot release a 'pre' version!");(fs.existsSync||path.existsSync)(packageFile)||die("No "+packageFile+" in this directory");pkg=JSON.parse(fs.readFileSync(packageFile));log("Current version is "+pkg.version+"; generating release "+releaseVersion);t=f.exec(pkg.version);u=+t[1]*1e4+ +t[2]*100+ +t[3];r=+e*1e4+ +o*100+ +i;r<u&&die("Next version is older than current version!");nextVersion=e+"."+o+"."+(isBeta?i:+i+1)+"-pre";n()}function checkGitStatus(n){child.execFile("git",["status"],function(t,i){var r=((i||"").match(/On branch (\S+)/)||[])[1];r!==branch&&die("Branches don't match: Wanted "+branch+", got "+r);/Changes to be committed/i.test(i)&&die("Please commit changed files before attemping to push a release.");/Changes not staged for commit/i.test(i)&&die("Please stash files before attempting to push a release.");n()})}function tagReleaseVersion(n){updatePackageVersion(releaseVersion);updatePluginVersion(releaseVersion);git(["commit","-a","-m","Tagging the "+releaseVersion+" release."],function(){git(["tag",releaseVersion],n)})}function updateReadme(n){var t=fs.readFileSync(readmeFile,"utf8");isBeta?log("Skipping "+readmeFile+" update (beta release)"):(log("Updating "+readmeFile),t=t.replace(/jquery-migrate-\d+\.\d+\.\d+/g,"jquery-migrate-"+releaseVersion),debug||fs.writeFileSync(readmeFile,t));n()}function gruntBuild(n){exec(gruntCmd,[],function(t,i){t&&die(t+stderr);log(i||"(no output)");n()})}function makeReleaseCopies(n){finalFiles={};Object.keys(releaseFiles).forEach(function(n){var t=releaseFiles[n],i=n.replace(/VER/g,releaseVersion);copy(t,i);finalFiles[i]=t});n()}function setNextVersion(n){updatePackageVersion(nextVersion,"master");git(["commit","-a","-m","Updating the source version to "+nextVersion],n)}function uploadToCDN(n){var t=[];Object.keys(finalFiles).forEach(function(n){t.push(function(t){exec("scp",[n,scpURL],t,skipRemote)},function(t){exec("curl",[cdnURL+n+"?reload"],t,skipRemote)})});t.push(n);steps.apply(this,t)}function pushToRemote(n){git(["push","--tags",repoURL,branch],n,skipRemote)}function steps(){var n=0,t=arguments;(function i(){process.nextTick(function(){t[n++](i)})})()}function updatePackageVersion(n,t){log("Updating "+packageFile+" version to "+n);t=t||n;pkg.version=n;pkg.author.url=setBlobVersion(pkg.author.url,t);pkg.licenses[0].url=setBlobVersion(pkg.licenses[0].url,t);writeJsonSync(packageFile,pkg)}function updatePluginVersion(n){var t;log("Updating "+pluginFile+" version to "+n);t=JSON.parse(fs.readFileSync(pluginFile));t.version=n;t.author.url=setBlobVersion(t.author.url,n);t.licenses[0].url=setBlobVersion(t.licenses[0].url,n);t.download=setBlobVersion(t.download,n);writeJsonSync(pluginFile,t)}function setBlobVersion(n,t){return n.replace(/\/blob\/(?:(\d+\.\d+[^\/]+)|master)/,"/blob/"+t)}function writeJsonSync(n,t){debug?console.log(JSON.stringify(t,null,"  ")):fs.writeFileSync(n,JSON.stringify(t,null,"\t")+"\n")}function copy(n,t){log("Copying "+n+" to "+t);debug||fs.writeFileSync(t,fs.readFileSync(n,"utf8"))}function git(n,t,i){exec("git",n,t,i)}function exec(n,t,i,r){debug||r?(log("# "+n+" "+t.join(" ")),i()):(log(n+" "+t.join(" ")),child.execFile(n,t,{env:process.env},function(n,t,r){n&&die(r||t||n);i()}))}function log(n){console.log(n)}function die(n){console.error("ERROR: "+n);process.exit(1)}function exit(){process.exit(0)}var debug=!1,skipRemote=!1,fs=require("fs"),child=require("child_process"),path=require("path"),releaseVersion,nextVersion,finalFiles,isBeta,pkg,scpURL="jqadmin@code.origin.jquery.com:/var/www/html/code.jquery.com/",cdnURL="http://code.origin.jquery.com/",repoURL="git@github.com:jquery/jquery-migrate.git",branch="master",gruntCmd=process.platform==="win32"?"grunt.cmd":"grunt",readmeFile="README.md",packageFile="package.json",pluginFile="migrate.jquery.json",devFile="dist/jquery-migrate.js",minFile="dist/jquery-migrate.min.js",releaseFiles={"jquery-migrate-VER.js":devFile,"jquery-migrate-VER.min.js":minFile};steps(initialize,checkGitStatus,updateReadme,tagReleaseVersion,gruntBuild,makeReleaseCopies,setNextVersion,uploadToCDN,pushToRemote,exit);
//# sourceMappingURL=release.min.js.map
